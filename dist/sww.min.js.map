{"version":3,"file":"sww.min.js","sources":["../src/postAll.js","../src/utils.js","../src/createDisposableWorker.js","../src/run.js","../src/post.js","../src/register.js","../src/unregister.js","../src/create.js","../src/index.js"],"sourcesContent":["// import { invalidObjectsArray, isArrayOf, notArray, returnNull, wrongLength, wrongObjects } from './utils'\r\nimport { isValid, argumentError } from './utils'\r\n\r\nconst makeOptionsFor = arr => {\r\n  return {\r\n    expected: 'an array of arrays, an array of objects, or an array of strings',\r\n    received: arr,\r\n    extraInfo: 'If an array of arrays, ' +\r\n      'it must have the same length as the actions registered for this worker.\\n' +\r\n      'If an array of objects, every object must containing two fields:\\n* message\\n* args'\r\n  }\r\n}\r\nexport function postAll (arr = []) {\r\n  if (isValid(arr)(['arraysArray', 'postParamsArray', 'stringsArray'])) {\r\n    if (arr.length === 0) return Promise.all(this.actions.map(({ message }) => this.postMessage(message)))\r\n\r\n    if (arr.every(item => typeof item === 'string')) {\r\n      return Promise.all(arr.map(msg => this.postMessage(msg)))\r\n    }\r\n\r\n    if (arr.every(item => typeof item === 'object' && !Array.isArray(item))) {\r\n      return Promise.all(arr.map(({ message, args }) => this.postMessage(message, args)))\r\n    }\r\n\r\n    if (arr.every(item => Array.isArray(item)) && arr.length === this.actions.length) {\r\n      return Promise.all(arr.map((args, index) => this.postMessage(this.actions[index].message, args)))\r\n    }\r\n  }\r\n\r\n  console.error(argumentError(makeOptionsFor(arr)))\r\n  return null\r\n}\r\n","// Argument validation\r\nconst isValidObjectWith = fields => obj =>\r\n  !!obj && !Array.isArray(obj) && fields.every(field => obj.hasOwnProperty(field))\r\n\r\nconst isValidAction = obj => {\r\n  return isValidObjectWith(['message', 'func'])(obj) &&\r\n    typeof obj.func === 'function' && typeof obj.message === 'string'\r\n}\r\n\r\nconst isValidActionsArray = arr => arr.every(isValidAction)\r\n\r\nconst isValidPostParams = obj => {\r\n  return isValidObjectWith(['message', 'args'])(obj) &&\r\n    Array.isArray(obj.args) && typeof obj.message === 'string'\r\n}\r\n\r\nconst isValidPostParamsArray = arr => arr.every(isValidPostParams)\r\n\r\nconst isValidObjectsArray = arr => (fields = []) =>\r\n  arr.every(isValidObjectWith(fields))\r\n\r\nconst testArray = {\r\n  'actionsArray': arr => isValidActionsArray(arr),\r\n  'arraysArray': arr => arr.every(item => Array.isArray(item)),\r\n  'objectsArray': arr => isValidObjectsArray(arr)(),\r\n  'postParamsArray': arr => isValidPostParamsArray(arr),\r\n  'stringsArray': arr => arr.every(item => typeof item === 'string')\r\n}\r\n\r\nconst isValidArg = arg => type => {\r\n  if (type === 'null') return arg === null\r\n  if (type === 'undefined') return arg === undefined\r\n  if (type === 'action') return isValidAction(arg)\r\n  if (Array.isArray(arg)) {\r\n    if (type !== 'array' && !testArray[type]) return false\r\n    if (type === 'array') return true\r\n    return testArray[type](arg)\r\n  }\r\n  if (arg) return typeof arg === type.toString() // eslint-disable-line\r\n  return false\r\n}\r\n\r\nconst isValid = argument => (types = null) => {\r\n  if (Array.isArray(types)) return types.some(type => isValidArg(argument)(type))\r\n  if (isValidArg(argument)(types)) return true\r\n  return false\r\n}\r\n\r\n// Argument error builder\r\nconst argumentError = ({ expected = '', received, extraInfo = '' }) => {\r\n  try {\r\n    return new TypeError(`${'You should provide ' + expected}${'\\n' + extraInfo}${'\\nReceived: ' + JSON.stringify(received)}`)\r\n  } catch (err) {\r\n    if (err.message.includes('Converting circular structure to JSON')) {\r\n      return new TypeError(`${'You should provide ' + expected}${'\\n' + extraInfo}${'\\nReceived a circular structure: ' + received}`)\r\n    }\r\n    throw err\r\n  }\r\n}\r\n\r\nconst getLocalhostPath = function () {\r\n  if (window.location.protocol === 'file:') {\r\n    const {pathname} = window.location\r\n    return `file://${pathname.replace(/\\/[^/]+\\.html/i, '')}`\r\n  }\r\n  return window.location.origin\r\n}\r\n\r\n// Response builder\r\nconst makeResponse = work => {\r\n  const locationPath = getLocalhostPath()\r\n  return `\r\n  const action = ${work}\r\n  self.__path = '${locationPath}'\r\n  self.onmessage = function(event) {\r\n    const args = event.data.message.args\r\n    self.postMessage(action.apply(null, args))\r\n    return close()\r\n  }\r\n  self.onerror = function(event) {\r\n      return close()\r\n  }\r\n`\r\n}\r\n\r\nexport {\r\n  makeResponse,\r\n  argumentError,\r\n  isValid\r\n}\r\n","export const createDisposableWorker = response => {\r\n  const URL = window.URL || window.webkitURL\r\n  const blob = new Blob([response], { type: 'application/javascript' }) // eslint-disable-line\r\n  const objectURL = URL.createObjectURL(blob)\r\n  const worker = new Worker(objectURL) // eslint-disable-line\r\n  worker.post = message =>\r\n    new Promise((resolve, reject) => {\r\n      worker.onmessage = event => {\r\n        URL.revokeObjectURL(objectURL)\r\n        resolve(event.data)\r\n      }\r\n      worker.onerror = e => {\r\n        console.error(`Error: Line ${e.lineno} in ${e.filename}: ${e.message}`)\r\n        reject(e)\r\n      }\r\n      worker.postMessage({ message })\r\n    })\r\n  return worker\r\n}\r\n","import { argumentError, isValid, makeResponse } from './utils'\r\nimport { createDisposableWorker } from './createDisposableWorker'\r\n\r\nexport const run = (work = null, args) => {\r\n  const validWork = isValid(work)('function')\r\n  const validArgs = isValid(args)(['array', 'undefined'])\r\n  if (validWork && validArgs) {\r\n    const worker = createDisposableWorker(makeResponse(work))\r\n    return worker.post({ args })\r\n  }\r\n  if (!validWork) console.error(argumentError({ expected: 'a function', received: work }))\r\n  if (!validArgs) console.error(argumentError({ expected: 'an array', received: args }))\r\n  return null\r\n}\r\n","import { argumentError, isValid } from './utils'\r\nimport { run } from './run'\r\n\r\nconst warnWork = msg => {\r\n  console.warn(`WARN! ${msg} is not a registered action for this worker`)\r\n  return `${msg} is not a registered action for this worker`\r\n}\r\n\r\nexport const post = actions => (msg = null, args) => {\r\n  const validMessage = isValid(msg)('string')\r\n  const validArgs = isValid(args)(['array', 'undefined'])\r\n  if (validMessage && validArgs) {\r\n    const work = actions\r\n      .filter(({ message }) => JSON.stringify(message) === JSON.stringify(msg))\r\n      .map(action => action.func)\r\n      .pop()\r\n\r\n    if (!work) return run(warnWork, [JSON.stringify(msg)])\r\n    if (args) return run(work, args)\r\n    return run(work)\r\n  }\r\n\r\n  if (!validMessage) console.error(argumentError({ expected: 'a string', received: msg }))\r\n  if (!validArgs) console.error(argumentError({ expected: 'an array', received: args }))\r\n  return null\r\n}\r\n","import { argumentError, isValid } from './utils'\r\n\r\nconst isActionOf = actions => newAction =>\r\n  actions.some(action => action.message === newAction.message)\r\n\r\nconst warnMsg = action =>\r\n  `WARN! An action with message \"${action.message}\" is already registered for this worker`\r\n\r\nconst pushInto = actions => action => {\r\n  if (isActionOf(actions)(action)) {\r\n    console.warn(warnMsg(action))\r\n    return actions.length\r\n  }\r\n  return actions.push(action)\r\n}\r\n\r\nconst makeOptionsFor = action => {\r\n  return {\r\n    expected: 'an array of actions or an action',\r\n    received: action,\r\n    extraInfo: 'Every action should be an object containing two fields:\\n* message\\n* func'\r\n  }\r\n}\r\n\r\nexport const register = actions => (action = null) => {\r\n  if (isValid(action)(['action', 'actionsArray'])) {\r\n    if (Array.isArray(action)) {\r\n      return action.reduce((actions, action) => {\r\n        pushInto(actions)(action)\r\n        return actions\r\n      }, actions).length\r\n    }\r\n\r\n    return pushInto(actions)(action)\r\n  }\r\n  console.error((argumentError(makeOptionsFor(action))))\r\n  return null\r\n}\r\n","import { argumentError, isValid } from './utils'\r\n\r\nconst removeFrom = actions => msg => {\r\n  const index = actions.findIndex(({ message }) => message === msg)\r\n  index === -1\r\n    ? console.warn(`WARN! Impossible to unregister action with message \"${msg}\".\\nIt is not a registered action for this worker.`)\r\n    : actions.splice(index, 1)\r\n  return actions\r\n}\r\n\r\nconst makeOptions = msg => {\r\n  return {\r\n    expected: 'an array of strings or a string',\r\n    received: msg\r\n  }\r\n}\r\n\r\nexport const unregister = actions => (msg = null) => {\r\n  if (isValid(msg)(['string', 'stringsArray'])) {\r\n    if (Array.isArray(msg)) {\r\n      return msg.reduce((actions, message) => {\r\n        removeFrom(actions)(message)\r\n        return actions\r\n      }, actions).length\r\n    }\r\n    return removeFrom(actions)(msg).length\r\n  }\r\n\r\n  console.error(argumentError(makeOptions(msg)))\r\n  return null\r\n}\r\n","import { argumentError, isValid } from './utils'\r\nimport { post } from './post'\r\nimport { postAll } from './postAll'\r\nimport { register } from './register'\r\nimport { unregister } from './unregister'\r\n\r\nconst options = actions => {\r\n  return {\r\n    expected: 'an array of objects',\r\n    received: actions,\r\n    extraInfo: 'Every action should be an object containing two fields:\\n* message\\n* func'\r\n  }\r\n}\r\n\r\nexport const create = (actions = []) => {\r\n  if (isValid(actions)('actionsArray')) {\r\n    return {\r\n      actions: actions,\r\n      getAction: name => actions.find(action => action.message === name),\r\n      postMessage: post(actions),\r\n      postAll: postAll,\r\n      register: register(actions),\r\n      unregister: unregister(actions)\r\n    }\r\n  }\r\n  console.error(argumentError(options(actions)))\r\n  return null\r\n}\r\n","import { create } from './create'\r\nimport { run } from './run'\r\n\r\nconst createWrapper = () => {\r\n  if (!window.Worker) {\r\n    console.error('This browser does not support Workers.')\r\n    return null\r\n  }\r\n  if (!(window.URL.createObjectURL || window.webkitURL.createObjectURL)) {\r\n    console.error('This browser does not have URL.createObjectURL method.')\r\n    return null\r\n  }\r\n  return { create, run }\r\n}\r\n\r\nconst WorkerWrapper = createWrapper()\r\n\r\nexport default WorkerWrapper\r\n"],"names":["postAll","arr","isValid","length","Promise","all","this","actions","map","message","_this","postMessage","every","item","msg","Array","isArray","args","index","error","argumentError","makeOptionsFor","isValidObjectWith","obj","fields","hasOwnProperty","field","isValidAction","func","isValidActionsArray","isValidPostParams","isValidPostParamsArray","isValidObjectsArray","testArray","isValidArg","type","arg","undefined","toString","types","some","argument","expected","received","extraInfo","TypeError","JSON","stringify","err","includes","getLocalhostPath","window","location","protocol","pathname","replace","origin","makeResponse","work","createDisposableWorker","URL","webkitURL","blob","Blob","response","objectURL","createObjectURL","worker","Worker","post","resolve","reject","onmessage","revokeObjectURL","event","data","onerror","e","lineno","filename","run","validWork","validArgs","console","warnWork","warn","validMessage","filter","action","pop","isActionOf","newAction","warnMsg","pushInto","push","register","reduce","removeFrom","findIndex","splice","makeOptions","unregister","options","create","find","name","createWrapper","WorkerWrapper"],"mappings":"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"}